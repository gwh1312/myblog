(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{330:function(n,e,t){"use strict";t.r(e);var r=t(33),o=Object(r.a)({},(function(){var n=this,e=n.$createElement,t=n._self._c||e;return t("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[t("h1",{attrs:{id:"登陆拦截逻辑"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#登陆拦截逻辑"}},[n._v("#")]),n._v(" 登陆拦截逻辑")]),n._v(" "),t("p",[n._v("第一步：路由拦截\n首先再定义路由的时候就需要多添加一个自定义字段requireAuth，用于判断该路由的访问是否需要登陆，如果用户已经登陆，则顺利进入路由，否则就进入登陆页面")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("```\nconst routes = [\n    {\n        path:'/',\n        name:'/',\n        component:Index\n    },\n    {\n        path:'/repository',\n        name:'reponsitory',\n        meta:{\n            // 添加该字段，表示进入这个路由是需要登陆的\n            requireAuth:true\n        },\n        conponent:Repository\n    },\n    {\n        path:'/login',\n        name:'login',\n        component:Login\n    }\n]\n```\n\n定义完路由后，我们主要是利用vue-router提供的钩子函数beforeEach(),对路由进行判断\n```\nrouter.beforeEach((to,form,next)=>{\n    if(to.meta.requireAuth) { // 判断该路由是否需要登陆权限\n        if(store.state.token) { // 通过vuex state获取当前的token是否存在\n            next();\n        }else {\n            next({\n                path:'/login',\n                query:{redirect:to.fullPath} // 将跳转的路由path作为参数，登陆成功后跳转到该路由\n            })\n        }\n    } else {\n        next()\n    }\n})\n```\n")])])]),t("p",[n._v("第二步：拦截器\n要想统一处理所有http请求和响应，就得用上axios的拦截器，通过配置http response inteceptor,当后端接口返回401 Unauthorized(未授权)，让用户重新登陆")]),n._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",[t("code",[n._v("```\n// http request 拦截器\naxios.interceptors.request.use(\n    config => {\n        if (store.state.token) {\n            config.headers.Authorization = `token ${store.state.token}`;\n        }\n        return config;\n    },\n    err =>{\n        return Promise.reject(err);\n    }\n)\n// http response 拦截器\naxios.interceptors.response.use(\n    response =>{\n        return response;\n    },\n    error =>{\n        if (error.response) {\n            switch (error.response.status) {\n                case 401:\n                    store.commit(types.LOGOUT);\n                    router.replace({\n                        path:'login',\n                        query:{redirect:router.currentRoute.fullPath}\n                    })\n            }\n        }\n        return Promise.reject(error.response.data)\n    }\n)\n```\n种树的最佳时间是十年前和现在。")])])])])}),[],!1,null,null,null);e.default=o.exports}}]);